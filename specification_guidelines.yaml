# YASPEC Project Guidelines
# validator_path: spec_validator.yaml
---
document_info:
  title: "YASPEC - YAML Automated Specification System Guidelines"
  version: "1.0.0"
  created_date: "2025-04-18"
  updated_date: "2025-04-18"
  author: "YASPEC Development Team"

project_overview:
  mission: "Streamline software specification management using YAML-based structured documentation"
  key_features:
    validation:
      - "Automated specification structure validation"
      - "Required fields verification"
      - "Data type checking"
    conversion:
      - "Multiple output format support (PDF, Word, HTML)"
      - "Markdown-compatible rich text"
    version_control:
      - "Git-friendly YAML format"
      - "Change history tracking"
    collaboration:
      - "Review process support"
      - "Comment management"

overview:
  purpose: "Provide guidelines for using YASPEC"
  target_users: "Software development teams"
  use_cases: "Software specification management"

requirements:
  functional:
    - YAML-based specification creation
    - Automated validation
    - Multiple output formats
  non_functional:
    - Git-friendly format
    - Easy to learn and use
  constraints:
    - Must follow YAML syntax

repository_structure:
  core_files:
    validate_spec.py: "Main validation script"
    spec_validator.yaml: "Validation rules definition"
    spec_sample.yaml: "Example specification file"
    document_sample.yaml: "Long-form document example"
  
  recommended_project_structure:
    docs:
      requirements: "Requirements specifications"
      design: "Design documents"
      api: "API specifications"
      test: "Test specifications"
    templates: "Document templates"
    tools: "Helper scripts and tools"

file_format_guidelines:
  specification_files:
    format: "YAML (.yaml)"
    encoding: "UTF-8"
    line_endings: "LF (\\n)"
    validator_config: |
      # Add to the top of each spec file:
      # validator_path: spec_validator.yaml
    er_diagram:
      description: |
        For ER diagram (Entity-Relationship diagram) definitions, in addition to structured YAML notation,
        it is also recommended to include Mermaid syntax as a string block within YAML when needed.
        This enables direct visualization (rendering) of ER diagrams from the specification document.
      mermaid_field_example: |
        er_diagram_mermaid: |
          ```mermaid
          erDiagram
              USER {
                int id
                string name
                string email
              }
              ORDER {
                int id
                int user_id
                decimal total
              }
              USER ||--o{ ORDER : "has orders"
          ```
      note: |
        Mermaid blocks can be extracted and visualized using Markdown-compatible editors or tools.
        By leveraging both YAML structure and Mermaid syntax, you can achieve both machine-readability and visual clarity in design documentation.
  naming_conventions:
    - "Use lowercase letters and hyphens"
    - "Be descriptive and consistent"
    - "Avoid spaces and special characters"

version_control:
  practices:
    - "All specifications must be Git-managed"
    - "Clear commit messages describing changes"
    - "Pull requests for significant changes"
  
  branching_strategy:
    main: "Stable, approved specifications"
    feature: "New specification development"
    review: "Specification review process"

review_process:
  steps:
    1: "Author creates initial specification"
    2: "Automated validation check"
    3: "Peer review request"
    4: "Review feedback incorporation"
    5: "Final approval"
  
  validation_checks:
    - "Structure compliance"
    - "Required fields presence"
    - "Data type correctness"
    - "Cross-reference validity"

quality_standards:
  content:
    - "Accuracy of information"
    - "Consistency in terminology"
    - "Appropriate use of diagrams"
    - "Clear traceability"
  
  format:
    - "Proper YAML structure"
    - "Valid cross-references"
    - "Consistent formatting"
    - "Complete metadata"

getting_started:
  setup:
    - "Install Python 3.6+"
    - "Install PyYAML: pip install pyyaml"
    - "Clone repository"
    - "Review spec_sample.yaml"
  
  first_specification:
    - "Copy spec_sample.yaml template"
    - "Add validator_path comment"
    - "Fill in required sections"
    - "Run validation: python validate_spec.py your_spec.yaml"
  
  best_practices:
    - "Use version control from the start"
    - "Validate specifications regularly"
    - "Follow naming conventions"
    - "Keep documentation up to date"
